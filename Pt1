python3 -m venv myenv
source myenv/bin/activate
pip install package1 package2 package3
git init
git add .
git commit -m "Initial commit"
git remote add origin your_repository_url
git push -u origin master

from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    username = Column(String(20), primary_key=True)
    password = Column(String, nullable=False)
    email = Column(String(50), unique=True, nullable=False)
    first_name = Column(String(30), nullable=False)
    last_name = Column(String(30), nullable=False)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{% endblock %}</title>
</head>
<body>
    <header>
        <h1>{% block page_title %}{% endblock %}</h1>
    </header>
    <main>
        {% block content %}{% endblock %}
    </main>
</body>
</html>

from flask import Flask, redirect, render_template, request

app = Flask(__name__)

@app.route('/')
def index():
    return redirect('/register')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        # Process registration form
        return redirect('/secret')
    # Show registration form
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # Process login form
        return redirect('/secret')
    # Show login form
    return render_template('login.html')

@app.route('/secret')
def secret():
    return 'You made it!'

if __name__ == '__main__':
    app.run(debug=True)

from flask import session

# Store username in session after successful registration or login
session['username'] = 'user123'

from flask import Flask, redirect, url_for, session

app = Flask(__name__)

@app.route('/logout', methods=['GET'])
def logout():
    session.clear()
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run()

@app.route('/users/<username>')
def user_profile(username):
    if current_user.is_authenticated:
        user = User.query.filter_by(username=username).first()
        if user:
            return render_template('user_profile.html', user=user)
        else:
            return "User not found", 404
    else:
        return "Unauthorized", 401



